{
    "fromJson": {
        "prefix": "fromJson",
        "body": "fromJson( ${1:data} ) ",
        "description": "Преобразование Json в объект"
    },
    "toJson": {
        "prefix": "toJson",
        "body": "toJson( $1 )",
        "description": "Преобразование объекта в JSON"
    },
    "fromBase64Url": {
        "prefix": "fromBase64Url",
        "body": "fromBase64Url( '${1:Base64Url}' ) ",
        "description": "Раскодирование из Base64Url"
    },
    "toBase64Url": {
        "prefix": "toBase64Url",
        "body": "toBase64Url( '${1:string}' ) ",
        "description": "Кодирование в Base64Url"
    },
    "dump": {
        "prefix": "dump",
        "body": "dump( ${1:data} ) ",
        "description": "Дебаг значения переменных"
    },
    "request.headers": {
        "prefix": [
            "request.headers",
            "headers"
        ],
        "body": "request.headers ",
        "description": "Заголовки запроса"
    },
    "request.params": {
        "prefix": [
            "request.params",
            "params"
        ],
        "body": "request.params ",
        "description": "Данные запроса"
    },
    "filter": {
        "prefix": "filter",
        "body": "filter( ${1:key} = ${2:value} ) ",
        "description": "Пример: {{ nopaid_block2  = user.us.filter( status = [ 'NOT PAID', 'BLOCK' ] ).items }}"
    },
    "where": {
        "prefix": "where",
        "body": "where = { ${1:key} = ${2:value} } ",
        "description": "Пример: {{ nopaid_block = user.us.items( where =  { status = [ 'NOT PAID', 'BLOCK' ] } ) }}"
    },
    "toQueryString": {
        "prefix": "toQueryString",
        "body": "toQueryString( $1 )",
        "description": "Преобразование объектов в Query string"
    },
    "event_name": {
        "prefix": "event_name",
        "body": "event_name ",
        "description": "Название текущего события"
    },
    "list_for_api": {
        "prefix": "list_for_api",
        "body": "list_for_api($1)",
        "description": "Получение списков данных из объекта"
    },
    "spool.history.clean": {
        "prefix": "spool.history.clean",
        "body": "spool.history.clean( days = 30 )",
        "description": "Удалить всю историю задач старше указанных дней (по умолчанию 30 дней)"
    },
    "http.get()": {
        "prefix": "http.get()",
        "body": "http.get( ${1:'URL'}, 'headers',headers )",
        "description": "GET запрос, headers = {'Authorization' => token }"
    },
    "http.post()": {
        "prefix": "http.post()",
        "body": "http.post( ${1:'URL'}, 'content_type','application/json', 'headers',headers, 'content',content )",
        "description": "POST запрос, headers = {'Authorization' => token }, content = { username = 'user' _ us.id }"
    },
    "http.put()": {
        "prefix": "http.put()",
        "body": "http.put( ${1:'URL'}, 'content_type','application/json', 'headers',headers, 'content',content )",
        "description": "PUT запрос, headers = {'Authorization' => token }, content = { username = 'user' _ us.id }"
    },
    "http.delete()": {
        "prefix": "http.delete()",
        "body": "http.delete( ${1:'URL'}, 'content_type','application/json', 'headers',headers, 'content',content )",
        "description": "DELETE запрос, headers = {'Authorization' => token }, content = { username = 'user' _ us.id }"
    },
    "http.patch()": {
        "prefix": "http.patch()",
        "body": "http.patch( ${1:'URL'}, 'content_type','application/json', 'headers',headers, 'content',content )",
        "description": "PATCH запрос, headers = {'Authorization' => token }, content = { username = 'user' _ us.id }"
    },
    "http.options()": {
        "prefix": "http.options()",
        "body": "http.options( ${1:'URL'} )",
        "description": "OPTIONS запрос"
    },
    "comment": {
        "prefix": "comment",
        "body": "{{# ${1:comment} }}",
        "description": "Комментарий в коде {{# комментарий }}"
    }
}