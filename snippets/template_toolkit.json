{
	"block": {
		"prefix": "block",
		"body": "{{ BLOCK ${1:name} }}\n   ${2:block...}\n{{ END }}\n",
		"description": "BLOCK"
	},
	"call": {
		"prefix": "call",
		"body": "{{ CALL ${1:expr} }}\n",
		"description": "CALL"
	},
	"def": {
		"prefix": "def",
		"body": "{{ DEFAULT ${1:var} = ${2:expr} }}\n",
		"description": "DEFAULT"
	},
	"end": {
		"prefix": "end",
		"body": "{{ END }}\n",
		"description": "END"
	},
	"for": {
		"prefix": "for",
		"body": "{{ FOR ${1:item} IN ${2:list...} }}\n   ${3:block...}\n{{ END }}\n",
		"description": "FOR"
	},
	"for1": {
		"prefix": "{{ for}}",
		"body": "{{ FOR ${1:item} IN ${2:list...} }}\n   ${3:block...}\n{{ END ",
		"description": "FOR"
	},
	"for2": {
		"prefix": "{{for}}",
		"body": "{{ FOR ${1:item} IN ${2:list...} }}\n   ${3:block...}\n{{ END ",
		"description": "FOR"
	},
	"get": {
		"prefix": "get",
		"body": "{{ GET ${1:expr} }}\n",
		"description": "GET"
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": "{{ IF ${1:expr} }}\n   ${2:block...}\n{{ ELSE }}\n   ${3:block...}\n{{ END }}\n",
		"description": "IF ELSE"
	},
	"ifs": {
		"prefix": "ifs",
		"body": "{{ IF ${1:expr} }}\n   ${2:block...}\n{{ ELSIF ${3:expr} }}\n   ${4:block...}\n{{ ELSE }}\n   ${5:block...}\n{{ END }}\n",
		"description": "IF ELSIF ELSE"
	},
	"ifelsif": {
		"prefix": "ifelsif",
		"body": "{{ IF ${1:expr} }}\n   ${2:block...}\n{{ ELSIF ${3:expr} }}\n   ${4:block...}\n{{ END }}\n",
		"description": "IF ELSIF"
	},
	"if": {
		"prefix": "if",
		"body": "{{ IF ${1:expr} }}\n   ${3:block...}\n{{ END }}\n",
		"description": "IF"
	},
	"if1": {
		"prefix": "{{ if}}",
		"body": "{{ IF ${1:expr} }}\n   ${3:block...}\n{{ END ",
		"description": "IF"
	},
	"if2": {
		"prefix": "{{if}}",
		"body": "{{ IF ${1:expr} }}\n   ${3:block...}\n{{ END ",
		"description": "IF"
	},
	"ins": {
		"prefix": "ins",
		"body": "{{ INSERT ${1:template} }}\n",
		"description": "INSERT"
	},
	"inca": {
		"prefix": "inca",
		"body": "{{ INCLUDE ${1:template} ${2:args...} }}\n",
		"description": "INCLUDE args"
	},
	"inc": {
		"prefix": "inc",
		"body": "{{ INCLUDE ${1:template} }}\n",
		"description": "INCLUDE"
	},
	"macro": {
		"prefix": "macro",
		"body": "{{ MACRO ${1:name}\n         ${2:directive}\n}}\n",
		"description": "MACRO"
	},
	"proca": {
		"prefix": "proca",
		"body": "{{ PROCESS ${1:template} ${2:args...} }}\n",
		"description": "PROCESS args"
	},
	"proc": {
		"prefix": "proc",
		"body": "{{ PROCESS ${1:template} }}\n",
		"description": "PROCESS"
	},
	"set": {
		"prefix": "set",
		"body": "{{ SET ${1:var} = ${2:expr} }}\n",
		"description": "SET"
	},
	"switch": {
		"prefix": "switch",
		"body": "{{ SWITCH ${1:expr} }}\n{{   CASE ${2:value1} }}\n          ${3:block...}\n{{   CASE ${4:value2} }}\n          ${5:block...}\n{{   CASE # default case }}\n          ${6:block...}\n{{ END }}\n",
		"description": "SWITCH"
	},
	"use": {
		"prefix": "use",
		"body": "{{ USE ${1:plugin}(${2:args}) }}\n",
		"description": "USE"
	},
	"wrapa": {
		"prefix": "wrapa",
		"body": "{{ WRAPPER ${1:template} ${2:args...} }}\n   ${3:content...}\n{{ END }}\n",
		"description": "WRAPPER args"
	},
	"wrap": {
		"prefix": "wrap",
		"body": "{{ WRAPPER ${1:template} }}\n   ${3:content...}\n{{ END }}\n",
		"description": "WRAPPER"
	},
	"text": {
		"prefix": ["text", "TEXT"],
		"body": "{{ TEXT = BLOCK }}\n   ${2:text...}\n{{ END #TEXT }}\n",
		"description": "INCLUDE"
	},
	".chunk": {
        "prefix": ".chunk",
        "body": ".chunk(${1:.}).join('${2}')",
        "description": "Разбивает значение на список частей определенного размера"
    },
    ".collapse": {
        "prefix": ".collapse",
        "body": ".collapse",
        "description": "Возвращает текст, в котором удалены все начальные и конечные пробелы, а все внутренние последовательности пробелов преобразованы в один пробел"
    },
    ".defined": {
        "prefix": ".defined",
        "body": ".defined",
        "description": "Возвращает true, если значение определено или если список определен."
    },
    ".dquote": {
        "prefix": ".dquote",
        "body": ".dquote",
        "description": "Возвращает текст с любыми символами двойных кавычек, экранированными префиксом обратной косой черты. Любые символы новой строки в тексте будут заменены на \"\\n\""
    },
    "hash": {
        "prefix": "hash",
        "body": ".hash",
        "description": "Возвращает значение как ссылку на хэш, содержащую одну запись с ключом, указывающим на исходное скалярное значение. Используется для упрощения преобразования данных в разные форматы.\n\nТакже может возвращать ссылку на хэш-массив, состоящую из элементов списка, где четные элементы (0, 2, 4 и т.д.) становятся ключами, а нечетные (1, 3, 5 и т.д.) — значениями."
    },
    ".lcfirst": {
        "prefix": ".lcfirst",
        "body": ".lcfirst",
        "description": "Возвращает текст, в котором первая буква преобразована в нижний регистр."
    },
    ".length": {
        "prefix": ".length",
        "body": ".length",
        "description": "Возвращает длину строкового представления элемента:"
    },
    ".empty": {
        "prefix": ".empty",
        "body": ".empty",
        "description": "Возвращает true, если строка пуста. Возвращает true, если хеш пуст или если список пуст."
    },
    ".lower": {
        "prefix": ".lower",
        "body": ".lower",
        "description": "Возвращает текст в нижнем регистре"
    },
    ".match": {
        "prefix": ".match",
        "body": ".match('${1}')",
        "description": "Выполняет сопоставление регулярного выражения со строкой, используя шаблон, переданный в качестве аргумента. Если шаблон соответствует строке, то метод возвращает ссылку на список всех строк, захваченных в скобках в шаблоне. Если шаблон не совпадает, то метод возвращает false."
    },
    ".repeat": {
        "prefix": ".repeat",
        "body": ".repeat(${1})",
        "description": "Повторяет строку указанное количество раз."
    },
    ".replace": {
        "prefix": ".replace",
        "body": ".replace('${1}', '${2}')",
        "description": "Заменяет все вхождения указанного шаблона (регулярное выражение Perl) другим текстом."
    },
    ".remove": {
        "prefix": ".remove",
        "body": ".remove('${1}')",
        "description": "Выводит строку, в которой удалены все вхождения шаблона (задано как регулярное выражение Perl)."
    },
    ".search": {
        "prefix": ".search",
        "body": ".search('${1}')",
        "description": "Возвращает true, если строка соответствует шаблону регулярного выражения."
    },
    ".size": {
        "prefix": ".size",
        "body": "$.size",
        "description": "Возвращает количество пар ключ/значение в хэше. Возвращает размер списка (количество элементов). Для скалярных значений всегда возвращается 1."
    },
    ".split": {
        "prefix": ".split",
        "body": ".split('${1}')",
        "description": "Использует функцию Perl split(), чтобы разбить строку на список строк."
    },
    ".substr": {
        "prefix": ".substr",
        "body": ".substr(${1}, ${2}, '${3}')",
        "description": "Возвращает подстроку, начинающуюся с позиции offset, длиной length символов. Если длина не указана, возвращает весь остаток строки. Если задан replace, метод заменяет часть строки указанным значением и возвращает старую подстроку."
    },
    ".squote": {
        "prefix": ".squote",
        "body": ".squote",
        "description": "Возвращает текст, содержащий все символы одинарных кавычек, экранированные префиксом в виде обратной косой черты."
    },
    ".trim": {
        "prefix": ".trim",
        "body": ".trim",
        "description": "Возвращает текст, в котором удалены все начальные и конечные пробелы."
    },
    ".ucfirst": {
        "prefix": ".ucfirst",
        "body": ".ucfirst",
        "description": "Преобразует первую букву текста в верхний регистр."
    },
    ".upper": {
        "prefix": ".upper",
        "body": ".upper",
        "description": "Возвращает текст в верхнем регистре."
    },
    ".keys": {
        "prefix": ".keys",
        "body": ".keys",
        "description": "Возвращает список ключей в хэше. Порядок неопределён, но соответствует порядку значений."
    },
    ".join": {
        "prefix": ".join",
        "body": ".join('${1:, }')",
        "description": "Объединяет элементы списка в одну строку с разделителем, указанным в аргументе."
    },
    ".items": {
        "prefix": ".items",
        "body": ".items",
        "description": "Возвращает список ключей и значений, развернутый в один общий список."
    },
    ".pairs": {
        "prefix": ".pairs",
        "body": ".pairs",
        "description": "Возвращает список пар ключ-значение, отсортированный по ключам."
    },
    ".list": {
        "prefix": ".list",
        "body": ".list",
        "description": "Возвращает содержимое хеша в виде списка."
    },
    ".sort": {
        "prefix": [".sort"],
        "body": ".sort",
        "description": "Возвращает список ключей, отсортированных в алфавитном порядке."
    },
    ".sort()": {
        "prefix": [".sort()"],
        "body": ".sort('${1}')",
        "description": "Возвращает список ключей, отсортированных в алфавитном порядке. Вы также можете указать несколько ключей сортировки."
    },
    ".nsort": {
        "prefix": [".nsort"],
        "body": ".nsort",
        "description": "Возвращает список ключей, отсортированных по номерам (numerically sorted)."
    },
    ".nsort()": {
        "prefix": [".nsort()"],
        "body": ".nsort('${1}')",
        "description": "Возвращает список ключей, отсортированных по номерам (numerically sorted). Вы также можете указать несколько ключей сортировки."
    },
    ".import": {
        "prefix": ".import",
        "body": ".import(${1:hash})",
        "description": "Импортирует содержимое другого хэш-массива в текущий хэш-массив. Может использоваться для добавления элементов из одного или нескольких списков в существующий список."
    },
    ".defined()": {
        "prefix": ".defined",
        "body": ".defined('${1:somekey}')",
        "description": "Возвращает true или false, проверяя, определен ли элемент в хеше или списке, указанный ключом или позицией."
    },
    ".exists": {
        "prefix": ".exists",
        "body": ".exists('${1:somekey}')",
        "description": "Проверяет существование ключа в хэше и возвращает true или false."
    },
    ".delete": {
        "prefix": ".delete",
        "body": ".delete('${1:foo}', '${2:bar}')",
        "description": "Удаляет один или несколько элементов из хэша."
    },
    ".first": {
        "prefix": ".first",
        "body": ".first(${1})",
        "description": "Возвращает первый элемент в списке. Если передан числовой аргумент n, возвращает первые n элементов."
    },
    ".last": {
        "prefix": ".last",
        "body": ".last(${1})",
        "description": "Возвращает последний элемент в списке. Если передан числовой аргумент n, возвращает последние n элементов."
    },
    ".max": {
        "prefix": ".max",
        "body": ".max",
        "description": "Возвращает максимальный номер индекса (размер списка минус единица)."
    },
    ".reverse": {
        "prefix": ".reverse",
        "body": ".reverse",
        "description": "Возвращает элементы списка в обратном порядке."
    },
    ".grep": {
        "prefix": ".grep",
        "body": ".grep('${1:^https:}')",
        "description": "Возвращает список элементов, соответствующих указанному шаблону регулярного выражения."
    },
    ".push": {
        "prefix": ".push",
        "body": ".push(${1:foo})",
        "description": "Добавляет элемент или элементы в конец списка."
    },
    ".unshift": {
        "prefix": ".unshift",
        "body": ".unshift(${1:foo})",
        "description": "Добавляет элемент или элементы в начало списка."
    },
    ".shift": {
        "prefix": ".shift",
        "body": ".shift",
        "description": "Удаляет первый элемент из списка и возвращает его."
    },
    ".pop": {
        "prefix": ".pop",
        "body": ".pop",
        "description": "Удаляет последний элемент из списка и возвращает его."
    },
    ".unique": {
        "prefix": ".unique",
        "body": ".unique",
        "description": "Возвращает список уникальных элементов в списке в том же порядке, что и в исходном списке."
    },
    ".merge": {
        "prefix": ".merge",
        "body": ".merge(${1:list_two}, ${2:list_three})",
        "description": "Возвращает объединённый список из нуля или более других списков."
    },
    ".slice": {
        "prefix": ".slice",
        "body": ".slice(${1:0}, ${2:2})",
        "description": "Возвращает часть элементов списка между границами, переданными в качестве аргументов. Исходный список не изменяется."
    },
    ".splice": {
        "prefix": ".splice",
        "body": ".splice(${1:1}, ${2:1}, ${3:ping_pong})",
        "description": "Позволяет выборочно удалить и/или заменить элементы в списке. Удаляет length элементов, начиная с позиции offset, и заменяет их элементами из предоставленного списка."
    },
    ".item": {
        "prefix": ".item",
        "body": ".item(${1:0})",
        "description": "Возвращает элемент из списка, используя индекс, переданный в качестве аргумента."
    },
        "for_us": {
		"prefix": "for us in user.us.items",
		"body": "{{ FOR us IN user.us.items }}\n   ${3:block...}\n{{ END }}",
		"description": "Цикл для перебора пользовательских услуг FOR us IN user.us.items"
	},
	"for_user": {
		"prefix": "for user in user.items",
		"body": "{{ FOR user IN user.items }}\n   ${3:block...}\n{{ END }}",
		"description": "Цикл для перебора пользователей FOR user IN user.items"
	},
	"for_us_": {
		"prefix": "for us in u.us.items",
		"body": "{{ FOR us IN u.us.items }}\n   ${3:block...}\n{{ END }}",
		"description": "Цикл для перебора пользовательских услуг  FOR us IN u.us.items"
	},
	"for_u": {
		"prefix": "for u in user.items",
		"body": "{{ FOR u IN user.items }}\n   ${3:block...}\n{{ END }}",
		"description": "Цикл для перебора пользователей FOR u IN user.items"
	}
}
