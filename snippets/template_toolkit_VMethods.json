{
    ".chunk(size)": {
        "prefix": ".chunk",
        "body": ".chunk(${1:size}).join('${2:,}')",
        "description": "Разбивает значение на список частей определенного размера"
    },
    ".collapse": {
        "prefix": ".collapse",
        "body": ".collapse",
        "description": "Возвращает текст, в котором удалены все начальные и конечные пробелы, а все внутренние последовательности пробелов преобразованы в один пробел"
    },
    ".defined": {
        "prefix": ".defined",
        "body": ".defined",
        "description": "Возвращает true, если значение определено или если список определен."
    },
    ".dquote": {
        "prefix": ".dquote",
        "body": ".dquote",
        "description": "Возвращает текст с любыми символами двойных кавычек, экранированными префиксом обратной косой черты. Любые символы новой строки в тексте будут заменены на \"\\n\""
    },
    ".hash": {
        "prefix": ".hash",
        "body": ".hash",
        "description": "Возвращает значение как ссылку на хэш, содержащую одну запись с ключом, указывающим на исходное скалярное значение. Используется для упрощения преобразования данных в разные форматы.\n\nТакже может возвращать ссылку на хэш-массив, состоящую из элементов списка, где четные элементы (0, 2, 4 и т.д.) становятся ключами, а нечетные (1, 3, 5 и т.д.) — значениями."
    },
    ".lcfirst": {
        "prefix": ".lcfirst",
        "body": ".lcfirst",
        "description": "Возвращает текст, в котором первая буква преобразована в нижний регистр."
    },
    ".length": {
        "prefix": ".length",
        "body": ".length",
        "description": "Возвращает длину строкового представления элемента:"
    },
    ".empty": {
        "prefix": ".empty",
        "body": ".empty",
        "description": "Возвращает true, если строка пуста. Возвращает true, если хеш пуст или если список пуст."
    },
    ".lower": {
        "prefix": ".lower",
        "body": ".lower",
        "description": "Возвращает текст в нижнем регистре"
    },
    ".match(pattern, global)": {
        "prefix": ".match",
        "body": ".match('${1:pattern}')",
        "description": "Выполняет сопоставление регулярного выражения со строкой, используя шаблон, переданный в качестве аргумента. Если шаблон соответствует строке, то метод возвращает ссылку на список всех строк, захваченных в скобках в шаблоне. Если шаблон не совпадает, то метод возвращает false."
    },
    ".repeat(n)": {
        "prefix": ".repeat",
        "body": ".repeat(${1:number_of_times})",
        "description": "Повторяет строку указанное количество раз."
    },
    ".replace(search, replace)": {
        "prefix": ".replace",
        "body": ".replace('${1:pattern}', '${2:string}')",
        "description": "Заменяет все вхождения указанного шаблона (регулярное выражение Perl) другим текстом."
    },
    ".remove(pattern)": {
        "prefix": ".remove",
        "body": ".remove('${1:pattern}')",
        "description": "Выводит строку, в которой удалены все вхождения шаблона (задано как регулярное выражение Perl)."
    },
    ".search(pattern)": {
        "prefix": ".search",
        "body": ".search('${1:pattern}')",
        "description": "Возвращает true, если строка соответствует шаблону регулярного выражения."
    },
    ".size": {
        "prefix": ".size",
        "body": ".size",
        "description": "Возвращает количество пар ключ/значение в хэше. Возвращает размер списка (количество элементов). Для скалярных значений всегда возвращается 1."
    },
    ".split(pattern)": {
        "prefix": ".split",
        "body": ".split('${1::}')",
        "description": "Использует функцию Perl split(), чтобы разбить строку на список строк."
    },
    ".substr(offset, length, replacement)": {
        "prefix": ".substr",
        "body": ".substr(${1:offset}, ${2:length}, '${3:string}')",
        "description": "Возвращает подстроку, начинающуюся с позиции offset, длиной length символов. Если длина не указана, возвращает весь остаток строки. Если задан replace, метод заменяет часть строки указанным значением и возвращает старую подстроку."
    },
    ".squote": {
        "prefix": ".squote",
        "body": ".squote",
        "description": "Возвращает текст, содержащий все символы одинарных кавычек, экранированные префиксом в виде обратной косой черты."
    },
    ".trim": {
        "prefix": ".trim",
        "body": ".trim",
        "description": "Возвращает текст, в котором удалены все начальные и конечные пробелы."
    },
    ".ucfirst": {
        "prefix": ".ucfirst",
        "body": ".ucfirst",
        "description": "Преобразует первую букву текста в верхний регистр."
    },
    ".upper": {
        "prefix": ".upper",
        "body": ".upper",
        "description": "Возвращает текст в верхнем регистре."
    },
    ".keys": {
        "prefix": ".keys",
        "body": ".keys",
        "description": "Возвращает список ключей в хэше. Порядок неопределён, но соответствует порядку значений."
    },
    ".join": {
        "prefix": ".join",
        "body": ".join('${1:, }')",
        "description": "Объединяет элементы списка в одну строку с разделителем, указанным в аргументе."
    },
    ".items": {
        "prefix": ".items",
        "body": ".items",
        "description": "Возвращает список ключей и значений, развернутый в один общий список."
    },
    ".pairs": {
        "prefix": ".pairs",
        "body": ".pairs",
        "description": "Возвращает список пар ключ-значение, отсортированный по ключам."
    },
    ".list": {
        "prefix": ".list",
        "body": ".list",
        "description": "Возвращает содержимое хеша в виде списка."
    },
    ".sort": {
        "prefix": [
            ".sort"
        ],
        "body": ".sort",
        "description": "Возвращает список ключей, отсортированных в алфавитном порядке."
    },
    ".sort()": {
        "prefix": [
            ".sort()"
        ],
        "body": ".sort('${1:key}')",
        "description": "Возвращает список ключей, отсортированных в алфавитном порядке. Вы также можете указать несколько ключей сортировки."
    },
    ".nsort": {
        "prefix": [
            ".nsort"
        ],
        "body": ".nsort",
        "description": "Возвращает список ключей, отсортированных по номерам (numerically sorted)."
    },
    ".nsort()": {
        "prefix": [
            ".nsort()"
        ],
        "body": ".nsort('${1:key}')",
        "description": "Возвращает список ключей, отсортированных по номерам (numerically sorted). Вы также можете указать несколько ключей сортировки."
    },
    ".import": {
        "prefix": ".import",
        "body": ".import(${1:hash})",
        "description": "Импортирует содержимое другого хэш-массива в текущий хэш-массив. Может использоваться для добавления элементов из одного или нескольких списков в существующий список."
    },
    ".defined()": {
        "prefix": ".defined",
        "body": ".defined('${1:somekey}')",
        "description": "Возвращает true или false, проверяя, определен ли элемент в хеше или списке, указанный ключом или позицией."
    },
    ".exists": {
        "prefix": ".exists",
        "body": ".exists('${1:somekey}')",
        "description": "Проверяет существование ключа в хэше и возвращает true или false."
    },
    ".delete": {
        "prefix": ".delete",
        "body": ".delete('${1:foo}', '${2:bar}')",
        "description": "Удаляет один или несколько элементов из хэша."
    },
    ".first": {
        "prefix": ".first",
        "body": ".first(${1:n})",
        "description": "Возвращает первый элемент в списке. Если передан числовой аргумент n, возвращает первые n элементов."
    },
    ".last": {
        "prefix": ".last",
        "body": ".last(${1:n})",
        "description": "Возвращает последний элемент в списке. Если передан числовой аргумент n, возвращает последние n элементов."
    },
    ".max": {
        "prefix": ".max",
        "body": ".max",
        "description": "Возвращает максимальный номер индекса (размер списка минус единица)."
    },
    ".reverse": {
        "prefix": ".reverse",
        "body": ".reverse",
        "description": "Возвращает элементы списка в обратном порядке."
    },
    ".grep": {
        "prefix": ".grep",
        "body": ".grep('${1:^https:}')",
        "description": "Возвращает список элементов, соответствующих указанному шаблону регулярного выражения."
    },
    ".push(item)": {
        "prefix": ".push",
        "body": ".push(${1:foo})",
        "description": "Добавляет элемент или элементы в конец списка."
    },
    ".unshift(item)": {
        "prefix": ".unshift",
        "body": ".unshift(${1:foo})",
        "description": "Добавляет элемент или элементы в начало списка."
    },
    ".shift": {
        "prefix": ".shift",
        "body": ".shift",
        "description": "Удаляет первый элемент из списка и возвращает его."
    },
    ".pop": {
        "prefix": ".pop",
        "body": ".pop",
        "description": "Удаляет последний элемент из списка и возвращает его."
    },
    ".unique": {
        "prefix": ".unique",
        "body": ".unique",
        "description": "Возвращает список уникальных элементов в списке в том же порядке, что и в исходном списке."
    },
    ".merge": {
        "prefix": ".merge",
        "body": ".merge(${1:list_two}, ${2:list_three})",
        "description": "Возвращает объединённый список из нуля или более других списков."
    },
    ".slice(from, to)": {
        "prefix": ".slice",
        "body": ".slice(${1:from}, ${2:to})",
        "description": "Возвращает часть элементов списка между границами, переданными в качестве аргументов. Исходный список не изменяется."
    },
    ".splice(offset, length, list)": {
        "prefix": ".splice",
        "body": ".splice(${1:offset}, ${2:length}, ${3:list})",
        "description": "Позволяет выборочно удалить и/или заменить элементы в списке. Удаляет length элементов, начиная с позиции offset, и заменяет их элементами из предоставленного списка."
    },
    ".item": {
        "prefix": ".item",
        "body": ".item(${1:0})",
        "description": "Возвращает элемент из списка, используя индекс, переданный в качестве аргумента."
    }
}